#! /usr/bin/env python

import os
import argparse
import numpy as np
import torch

from newtonnet.data.neighbors import ExtensiveEnvironment
from newtonnet.data.loader import extensive_train_loader

# torch.autograd.set_detect_anomaly(True)
torch.set_default_tensor_type(torch.DoubleTensor)

# argument parser description
argparser = argparse.ArgumentParser(
    description=
    'This is a pacakge to run NewtonNet on a given data.'
)
argparser.add_argument(
    '-m',
    "--model",
    type=str,
    required=True,
    help="The path to the saved model (.pt file).")

argparser.add_argument(
    '-i',
    '--input',
    type=str,
    required=True,
    help='Path to .npz formatted input data.'
)

argparser.add_argument(
    '-o',
    '--output',
    type=str,
    required=False,
    default='output.npz',
    help='Path to .npz formatted output data.'
)

argparser.add_argument(
    '-d',
    '--device',
    type=str,
    required=False,
    default='cpu',
    help='Torch.device string.'
)

# define arguments
args = argparser.parse_args()
infile = args.input
outfile = args.output

model_path = args.model

# device
if len(args.device.split(",")) > 1:
    device = [torch.device(item) for item in args.device.split(",")]
else:
    device = [torch.device(args.device)]

# data
data = dict(np.load(infile))
data = {'R': data['R'], 'Z': data['Z'], 'N': data['N']}
num_frames = data['R'].shape[0]

batch_gen = extensive_train_loader(data,
                env_provider=ExtensiveEnvironment(),
                batch_size=100,
                shuffle=False,
                drop_last=False)

num_frames //= 100

# load pre-trained model
model = torch.load(model_path)

output = dict()
for s in range(num_frames):
    batch_data = next(batch_gen)
    result = model.forward(batch_data)
    for k,v in result.items():
        if k == 'hs':
            continue

        val = v.detach().cpu().numpy()
            
        if k not in output:
            output[k] = val
        else:
            output[k] = np.concatenate((output[k], val), axis=0)
    
    print(f"\r{(s+1)/num_frames * 100:0.2f}%, {s+1}/{num_frames}", end='\r')

np.savez_compressed(outfile, **output)